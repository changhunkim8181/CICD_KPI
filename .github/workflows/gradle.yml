#Action 이름을 설정할수 있다. "GitHub Actions CI/CD" 이름으로 설정하면 GitHub Action 대시보드에 설정된 이름으로 Action목록에 표시된다.
name: GitHub Actions CI/CD

#아래는 Event를 정의 할수 있다 다른말로 하면 워크플로가 시작되는 트리거를 말한다
#아래 코드는 main 브렌치에 push될때 워크플로가 동작된다
on:
  workflow_dispatch:
#  push:
#    branches: [main]

#아래의 env는 공통으로 쓸 값들을 전역변수처럼 사용할수 있다
#env로 정의한 값들은 \$\{{ env.DOCKER_TOKEN }} 이렇게 사용이 가능하다
env:
  EC2_HOST: ${{ secrets.HOST }}
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  DOCKER_HUB: sppaul/cicd
  CONTAINER_NAME: container
  DOCKER_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

#github actions에는 여러개 Job으로 구성이 가능하다 아래의 코드는 Gradle_Test_and_Build_Push, deploy_docker_ec2 2개의 Job로 구성 되어 있다
jobs:
  Gradle_Test_and_Build_Push:

    #runs-on이란 해당 actions을 어떤 환경에서 실행시킬지에 대한 값을 입력하는 인자로, github actions를 이용하려면 꼭 필요한 인자이다, 환경이란 OS를 말한다.
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17 #JDK 17버전을 설정한다
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

      #Gradle를 설정한다
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      
      #application.properties 파일을 value값을 로드 한다
    - name: Set up application.properties
      run: echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties

      #./gradlew 파일에 권한을 부여한다. 권한을 부여하지 않으면 Permissions 에러가 발생한다.
    - name: Build with Gradle authorization
      run: chmod +x ./gradlew

      # Gradle를 빌드하기 전 단위 테스트를 진행한다.
    - name: Run unit tests
      run: ./gradlew test

      # 단위 테스트 결과를 HTML 보고서로 업로드 한다.
    - name: Upload unit test HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-report
        path: ${{ github.workspace }}/build/reports/tests/test/
 
      # 단위 테스트 결과 HTML 보고서를 github Actions 작업 화면에 게시한다.
    - name: publish unit test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: ${{ github.workspace }}/build/test-results/test/TEST-*.xml

    - name: add comments to a pull request
      uses: mikepenz/action-junit-report@v4
      if: github.event_name == 'pull_request' && always()
      with:
        report_paths: ${{ github.workspace }}/build/test-results/test/TEST-*.xml
    
      # 단위 테스트가 끝나면 Gradle Build를 수행한다.
    - name: Build with Gradle
      run: ./gradlew build
    
      #war파일을 Docker Hub에 Push 하기 위해 Docker Hub에 로그인 한다.
    - name: Login to Docker Hub using Access Token
      run: echo "${{ env.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      #Docker 파일을 빌드하고 이미지로 생성한다.
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_HUB }}:latest  

      #생성된 이미지를 Docker Hub 리포지토리에 Push한다.
    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_HUB }}:latest

  deploy_docker_ec2:

    #Gradle_Test_and_Build_Push Job이 끝나면 다음으로 deploy_docker_ec2 Job이 수행된다. 
    #이렇게 순차적으로 Job을 수행하려면 needs에 이전 Job인 Gradle_Test_and_Build_Push Job을 명시해 줘야 한다.
    #그렇지 않으면 Job은 이벤트가 발생시 동시에 병렬로 수행 된다.
    needs: Gradle_Test_and_Build_Push
    runs-on: ubuntu-latest
    #2번째 Job은 Docker Hub에 Push한 이미지를 Pull명령로 내려받고 Docker Compose는 yml파일을 읽어 이미지를 실행한다.
    steps:
    - name: Deploy Docker Ec2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |                
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ env.DOCKER_HUB }}:latest
          docker-compose down
          docker-compose -f /home/ubuntu/docker-compose.yml up --build -d
          docker-compose -f /home/ubuntu/docker-compose.yml up -d
          docker image prune -f