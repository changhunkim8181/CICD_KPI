version: 2.1

# 파이프라인에 필요한 환경 변수 설정
environment:
  EC2_HOST: << pipeline.parameters.EC2_HOST >>
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: << pipeline.parameters.EC2_SSH_PRIVATE_KEY >>
  DOCKER_HUB: sppaul/cicd
  CONTAINER_NAME: container
  DOCKER_TOKEN: << pipeline.parameters.DOCKER_HUB_TOKEN >>

parameters:
  EC2_HOST:
    type: string
  EC2_SSH_PRIVATE_KEY:
    type: string
  DOCKER_HUB_TOKEN:
    type: string

jobs:
  # Gradle Test, Build, and Push Job 정의
  Gradle_Test_and_Build_Push:
    docker:
      - image: circleci/openjdk:17-jdk
    environment:
      DOCKER_USERNAME: << pipeline.parameters.DOCKER_USERNAME >>
    
    steps:
      - checkout

      - run:
          name: Set up JDK 17
          command: |
            echo "Java version:"
            java -version

      - run:
          name: Set up Gradle
          command: |
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle 7.3.1 # 필요한 Gradle 버전으로 설정
            
      - run:
          name: Set up application.properties
          command: echo "${PROPERTIES}" > ./src/main/resources/application.properties

      - run:
          name: Gradle Build Authorization
          command: chmod +x ./gradlew

      - run:
          name: Run unit tests
          command: ./gradlew test

      - store_artifacts:
          path: build/reports/tests/test
          destination: unit-test-report

      - run:
          name: Build with Gradle
          command: ./gradlew build

      - run:
          name: Login to Docker Hub
          command: echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build Docker image
          command: docker build -t "$DOCKER_HUB:latest" .

      - run:
          name: Push Docker image
          command: docker push "$DOCKER_HUB:latest"

  # deploy_docker_ec2 Job 정의
  deploy_docker_ec2:
    docker:
      - image: circleci/python:3.8  # EC2 배포를 위한 이미지 선택

    steps:
      - run:
          name: Deploy Docker on EC2
          command: |
            sudo apt-get update
            sudo apt-get install -y openssh-client
            echo "$PRIVATE_KEY" > private_key.pem
            chmod 400 private_key.pem
            ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_SSH_USER@$EC2_HOST << 'EOF'
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull $DOCKER_HUB:latest
              docker-compose down
              docker-compose -f /home/ubuntu/docker-compose.yml up --build -d
              docker-compose -f /home/ubuntu/docker-compose.yml up -d
              docker image prune -f
            EOF
workflows:
  version: 2
  deploy:
    jobs:
      - Gradle_Test_and_Build_Push
      - deploy_docker_ec2:
          requires:
            - Gradle_Test_and_Build_Push
